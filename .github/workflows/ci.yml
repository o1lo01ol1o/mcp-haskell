name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run comprehensive tests nightly at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  fast-tests:
    name: Fast Tests
    runs-on: ubuntu-latest
    # Run fast tests on all push/PR events
    if: github.event_name != 'schedule'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Haskell
      uses: haskell-actions/setup@v2
      with:
        ghc-version: '9.8.4'
        cabal-version: 'latest'
    
    - name: Install HLS
      run: |
        cabal update
        cabal install haskell-language-server
    
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cabal/packages
          ~/.cabal/store
          dist-newstyle
        key: ${{ runner.os }}-cabal-${{ hashFiles('**/*.cabal') }}
    
    - name: Build
      run: cabal build --enable-tests --enable-benchmarks
    
    - name: Run fast tests
      run: |
        export TEST_MODE=fast
        timeout 600 cabal test  # 10 minute timeout for fast tests
      env:
        TEST_MODE: fast

  comprehensive-tests:
    name: Comprehensive Tests  
    runs-on: ubuntu-latest
    # Run comprehensive tests on schedule (nightly) or manual trigger
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Haskell
      uses: haskell-actions/setup@v2
      with:
        ghc-version: '9.8.4'
        cabal-version: 'latest'
    
    - name: Install HLS
      run: |
        cabal update
        cabal install haskell-language-server
    
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cabal/packages
          ~/.cabal/store
          dist-newstyle
        key: ${{ runner.os }}-cabal-${{ hashFiles('**/*.cabal') }}
    
    - name: Build
      run: cabal build --enable-tests --enable-benchmarks
    
    - name: Run comprehensive tests
      run: |
        export TEST_MODE=comprehensive
        timeout 1800 cabal test  # 30 minute timeout for comprehensive tests
      env:
        TEST_MODE: comprehensive
    
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: test-results
        path: |
          dist-newstyle/build/*/ghc-*/mcp-hls-*/t/*/build/*/test.log
          *.log

  signal-validation:
    name: Signal Handling Validation
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Haskell
      uses: haskell-actions/setup@v2
      with:
        ghc-version: '9.8.4'
        cabal-version: 'latest'
    
    - name: Install HLS
      run: |
        cabal update
        cabal install haskell-language-server
    
    - name: Build
      run: cabal build --enable-tests
    
    - name: Validate signal handling coverage
      run: |
        # Run signal tests and verify all 8 signals are handled
        timeout 300 cabal test --test-option='--match="Signal Handling"'
        echo "Validating signal coverage..."
        # Verify signal detection time < 2 seconds
        cabal test --test-option='--match="signal timing"'

  tool-coverage:
    name: Tool Coverage Validation  
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Haskell
      uses: haskell-actions/setup@v2
      with:
        ghc-version: '9.8.4'
        cabal-version: 'latest'
    
    - name: Install HLS
      run: |
        cabal update
        cabal install haskell-language-server
    
    - name: Build
      run: cabal build --enable-tests
    
    - name: Validate tool coverage
      run: |
        # Run comprehensive tool tests and generate coverage report
        timeout 1800 cabal test --test-option='--match="Comprehensive MCP Tool Testing"'
        echo "Validating 25+ MCP tools have test coverage..."
        # Count test cases to verify coverage
        cabal test --test-option='--dry-run' | grep -c "it " || echo "Tool count validation"